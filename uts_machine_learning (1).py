# -*- coding: utf-8 -*-
"""UTS Machine Learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EvlOGZv_SH_EoUUMKrkUF9ImbNHiyFEn

#Import Library and Visualize Data Trends
"""

# Import necessary libraries
import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# Load the breast cancer dataset
data = load_breast_cancer()

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(data.data, data.target, test_size=0.3, random_state=42)

# Scale the data
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train a logistic regression model
model = LogisticRegression()
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Calculate accuracy of the model
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

# Convert the dataset into a pandas DataFrame
df = pd.DataFrame(data.data, columns=data.feature_names)

# Add the target variable to the DataFrame
df['target'] = data.target

# Use Seaborn to visualize the data trends
sns.pairplot(df, hue='target', vars=data.feature_names[:5])

"""#Explore Data using Decision Tree, Random Forest, and Self-Training"""

from sklearn.datasets import load_breast_cancer
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
import numpy as np
import pandas as pd

# Load the breast cancer dataset
data = load_breast_cancer()

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(data.data, data.target, test_size=0.3, random_state=42)

# Split the dataset into labeled and unlabeled subsets
X_labeled = data.data[:300]
y_labeled = data.target[:300]
X_unlabeled = data.data[300:]
y_unlabeled = data.target[300:]

# Train a decision tree model
dt_model = DecisionTreeClassifier(random_state=42)
dt_model.fit(X_train, y_train)

# Train a random forest model
rf_model = RandomForestClassifier(random_state=42)
rf_model.fit(X_train, y_train)

# Make predictions on the test set using the decision tree and random forest models
dt_pred = dt_model.predict(X_test)
rf_pred = rf_model.predict(X_test)

# Calculate accuracy of the models
dt_accuracy = accuracy_score(y_test, dt_pred)
rf_accuracy = accuracy_score(y_test, rf_pred)
print("Decision tree accuracy:", dt_accuracy)
print("Random forest accuracy:", rf_accuracy)

# Evaluate the performance of the final model on the test set
X_test = data.data[100:]
y_test = data.target[100:]
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Final accuracy: {accuracy}")